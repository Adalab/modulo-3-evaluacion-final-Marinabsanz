{"version":3,"sources":["components/CardPerson.js","components/List.js","components/FormFilter.js","images/rickandmorty-logo.png","services/getDataFromApi.js","services/localStoraje.js","components/App.js","serviceWorker.js","index.js"],"names":["CardPerson","props","personajes","name","species","gender","status","image","id","className","src","alt","List","pjElements","map","Form","onSubmit","e","preventDefault","type","placeholder","onChange","event","console","log","target","value","getDataFromApi","fetch","then","response","json","data","results","info","origin","origin2","url","episode","length","ToExport","get","key","defaultData","localStorage","getItem","JSON","parse","set","setItem","stringify","App","useState","ls","setPersonajes","useEffect","personajesData","table","logo","FormFilter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fc352b1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CardPerson = (props) => {\n  const { name, species, gender, status, image , id} = props.personajes;\n\n  <li key = {id} className= ''> </li>\n\n\n  return (\n    <article>\n      <img className=\"img\" src={image} alt={`foto de ${image}`} />\n      <p> {name} </p>\n      <p> {species}</p>\n      <p> {gender}</p>\n      <p> {status}</p>\n      \n    </article>\n  );\n};\n\nexport default CardPerson;\n","import React from 'react';\nimport CardPerson from './CardPerson';\n\nconst List = (props) => {\n\n  const pjElements = props.personajes.map (personajes => {\n   return (\n      \n      <CardPerson personajes= {personajes} />  \n   );\n  });\n\n   return (\n<section className=''>\n  <ul className='listPersons' > {pjElements}</ul>\n</section>\n\n   );\n\n  };\n  \nexport default List;\n","import React  from 'react';\n\nimport List from './List';\n\n const Form= (props) => {\n\nconst handleChange = (event) =>{\n  console.log(event.target.value)\n//  props.handleFilter (event.target.value);\n}; \n\nconst submitPj = (e) => {\n  e.preventDefault();\n}\n\n    return (\n    \n    <>\n      <form className=\"\"\n      onSubmit= {submitPj}\n      >\n     \n      <div className=\"\">\n        <div className=\"\">\n          <input\n            name=\"nombre\"\n            className=\"\"\n            type=\"text\"\n            id= ''\n            placeholder=\"Busca a tu personaje\"\n            onChange= {handleChange}\n            // value= {props.filterName}\n\n          />\n        </div>\n        <div className=\"\">\n          <select className=\"formControl\" name=\"especie\">\n            <option value=\"\"> Selecciona la especie</option>\n          </select>\n        </div>\n      </div>\n\n      <div className= ''>\n        <input\n        type= 'submit'\n        className= 'classBtn'\n        value= 'Buscar personaje'\n\n          />\n          </div>\n          </form>\n          <fieldset className=\"claim\">\n     ¡Aquí encontrarás más info de tus personajes favoritos!\n      </fieldset>\n   <div>  \n     <h4> Tus resultados</h4>\n   \n\n   </div>\n\n   </>\n    \n    );\n    \n    }\n    \n  \n    export default Form;","export default __webpack_public_path__ + \"static/media/rickandmorty-logo.de13d484.png\";","const getDataFromApi = () => {\n  const url = \"https://rickandmortyapi.com/api/character\";\n  return fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      const eachPersonData = data.results.map((info) => {\n        return {\n          id: info.id,\n          name: info.name,\n          species: info.species,\n          status: info.status,\n          gender:info.gender,\n          image: info.image,\n          origin: info.origin.name,\n          origin2:info.origin.url,\n          episode: info.episode.length,\n        };\n      });\n     \n      return eachPersonData\n    });\n\n \n};\n\nexport default getDataFromApi;\n","const get = (key, defaultData) => {\n    const data = localStorage.getItem(key);\n    if (data === null) {\n      return defaultData;\n    } else {\n      return JSON.parse(data);\n    }\n  };\n  \n  const set = (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  \n  const ToExport = {\n    get: get,\n    set: set\n  };\n  \n  export default ToExport;\n  ","import React, { useState, useEffect } from \"react\";\nimport CardPerson from \"./CardPerson\";\nimport CardPersonDetail from \"./CardPersonDetail\";\nimport FormFilter from \"./FormFilter\";\nimport List from \"./List\";\nimport \"../styles/App.scss\";\nimport logo from \"../images/rickandmorty-logo.png\";\nimport { Route, Switch } from \"react-router-dom\";\nimport getDataFromApi from \"../services/getDataFromApi\";\nimport ls from \"../services/localStoraje\";\n\nconst App = () => {\n  /////////ESTADO\n  const [personajes, setPersonajes] = useState(ls.get(\"pj\", []));\n  console.log(personajes);\n\n  //para filtrar dspues crear constant   y guardar en el ls tmb\n  // const [filterName, setFilterName] = useState (ls.get ('filterName', ''));\n  //effects\n\n  useEffect(() => {\n    if (personajes.length === 0) {\n      getDataFromApi().then((personajesData) => {\n        setPersonajes(personajesData);\n\n        console.table(personajesData);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    ls.set(\"personajes\", personajes);\n  }, [personajes]);\n\n  return (\n    <>\n      <header className=\"\">\n        <h1>\n          <img src={logo} alt=\"Rick and Morty logo\" className=\"logo\" />\n        </h1>\n      </header>\n      <main>\n        <FormFilter> </FormFilter>\n        <List personajes={personajes} />\n      </main>\n      <footer className=\"footer\">Marina Benítez Sánchez</footer>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}