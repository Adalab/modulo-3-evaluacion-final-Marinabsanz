{"version":3,"sources":["components/CompB.js","services/getDataFromApi.js","components/CompC.js","components/App.js","serviceWorker.js","index.js"],"names":["CompB","getDataFromApi","React","Component","fetch","then","response","json","data","results","map","info","id","name","species","status","photo","image","origin","origin2","url","episode","length","App","useState","setPersonajes","useEffect","personajesData","console","table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0NASeA,I,4BCcAC,GCrBKC,IAAMC,U,MDFH,WAErB,OAAOC,MADK,6CAETC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAaL,OAZeA,EAAKC,QAAQC,KAAI,SAACC,GAC/B,MAAO,CACLC,GAAID,EAAKC,GACTC,KAAMF,EAAKE,KACXC,QAASH,EAAKG,QACdC,OAAQJ,EAAKI,OACbC,MAAOL,EAAKM,MACZC,OAAQP,EAAKO,OAAOL,KACpBM,QAAQR,EAAKO,OAAOE,IACpBC,QAASV,EAAKU,QAAQC,gBEkBjBC,MAvBf,WAEA,MAAoCC,qBAApC,mBAAmBC,GAAnB,WAYE,OAVFC,qBAAW,WACVzB,IAAiBI,MAAM,SAACsB,GACzBF,EAAcE,GAEdC,QAAQC,MAAOF,QAEV,IAKD,mCACA,yCCbgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.9fd994e7.chunk.js","sourcesContent":["import React from 'react';\nimport CompA from './CompA';\n\nfunction CompB () {\n  return (\n   <h2>holahola</h2>\n  );\n}\n\nexport default CompB ;\n","const getDataFromApi = () => {\n  const url = \"https://rickandmortyapi.com/api/character\";\n  return fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      const pepino = data.results.map((info) => {\n        return {\n          id: info.id,\n          name: info.name,\n          species: info.species,\n          status: info.status,\n          photo: info.image,\n          origin: info.origin.name,\n          origin2:info.origin.url,\n          episode: info.episode.length,\n        };\n      });\n      return pepino;\n    });\n\n \n};\n\nexport default getDataFromApi;\n","import React from 'react';\n\nclass CompC extends React.Component {\n  constructor (props) {\n  super(props);\n  \n  // this.state= {randomProfiles:[]      \n  // }\n  \n  // getDataFromAPi()\n  // .then(pepino=> {this.setState({\n  //   randomProfiles:pepino \n  // });\n  // })\n  \n  }\n  \n    render()  { \n    return (\n      <div>  \n        \n        <ul>  aqui la funcion\n    </ul>\n  </div>\n  \n    );\n  } \n\n}\n\n  export default CompC;\n  ","import React, { useState, useEffect } from 'react';\nimport CompB  from './CompB';\nimport CompC from './CompC';\nimport '../styles/App.scss';\nimport { Route, Switch } from 'react-router-dom';\nimport getDataFromApi from '../services/getDataFromApi';\n\n\n\nfunction App() {\n\nconst [personajes, setPersonajes] = useState ();\n\nuseEffect (() =>  {  \n getDataFromApi().then ((personajesData) => {\nsetPersonajes(personajesData);\n\nconsole.table (personajesData)\n });\n } , []);\n\n ///localStorage  \n\n  return (\n    <>\n    <h1>Hola</h1>\n   \n</>\n  );\n\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}