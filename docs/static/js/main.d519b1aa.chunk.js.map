{"version":3,"sources":["services/getDataFromApi.js","services/localStorage.js","images/rickandmorty-logo.png","components/Header.js","components/MoreInfo.js","components/FormFilter.js","components/CardPerson.js","components/List.js","components/resetBtn.js","components/App.js","serviceWorker.js","index.js"],"names":["getDataFromApi","fetch","then","response","json","data","results","map","info","id","name","species","status","gender","image","origin","origin2","url","episode","length","ToExportLocalObj","get","key","defaultData","localStorage","getItem","JSON","parse","set","value","setItem","stringify","Header","className","src","logo","alt","MoreInfo","FormFilter","props","onSubmit","e","preventDefault","type","placeholder","filterName","onChange","event","handleFilter","target","console","log","CardPerson","personajes","to","List","pj","personaje","ResetBtn","App","useState","ls","setPersonajes","filterNamePerson","setFilterNamePerson","useEffect","personajesData","filteredPersonajes","filter","toLowerCase","includes","exact","path","Marina","Benítez","Sánchez","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4NAyBeA,EAzBQ,WAErB,OAAOC,MADK,6CAETC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAeL,OAduBA,EAAKC,QAAQC,KAAI,SAACC,GACvC,MAAO,CACLC,GAAID,EAAKC,GACTC,KAAMF,EAAKE,KACXC,QAASH,EAAKG,QACdC,OAAQJ,EAAKI,OACbC,OAAOL,EAAKK,OACZC,MAAON,EAAKM,MACZC,OAAQP,EAAKO,OAAOL,KACpBM,QAAQR,EAAKO,OAAOE,IACpBC,QAASV,EAAKU,QAAQC,eCGfC,EALU,CACvBC,IAdQ,SAACC,EAAKC,GACd,IAAMlB,EAAOmB,aAAaC,QAAQH,GAClC,OAAa,OAATjB,EACKkB,EAEAG,KAAKC,MAAMtB,IAUpBuB,IANU,SAACN,EAAKO,GAChBL,aAAaM,QAAQR,EAAKI,KAAKK,UAAUF,MCV9B,MAA0B,8C,OCgB1BG,EAbA,WAGf,OAEA,wBAAQC,UAAU,GAAlB,SACE,qBAAKC,IAAKC,EAAMC,IAAI,sBAAsBH,UAAU,kBCOlCI,EAZJ,WAEZ,OAEI,0BAAUJ,UAAU,QAApB,kFCwCOK,EA9CI,SAACC,GAclB,OACE,qCACE,sBAAMN,UAAU,GAAGO,SANN,SAACC,GAChBA,EAAEC,kBAKA,SACE,qBAAKT,UAAU,GAAf,SACE,qBAAKA,UAAU,GAAf,SACE,uBACEvB,KAAK,SACLD,GAAG,OACHwB,UAAU,GACVU,KAAK,OACLC,YAAY,uBACZf,MAAOU,EAAMM,WACbC,SAzBS,SAACC,GACpBR,EAAMS,aAAa,CACjBnB,MAAOkB,EAAME,OAAOpB,MACpBP,IAAK,SAGP4B,QAAQC,IAAIJ,EAAME,OAAOpB,gBAgCvB,8BACE,uD,OCfOuB,EAxBI,SAACb,GAClB,MAA6DA,EAAMc,WAA3D3C,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASE,EAAvB,EAAuBA,OAAgBC,GAAvC,EAA+BF,OAA/B,EAAuCE,OAAgBL,GAAvD,EAA+CM,OAA/C,EAAuDN,IAKvD,OACE,cAAC,IAAD,CAAMwB,UAAW,YAAYqB,GAAE,sBAAmB7C,GAAlD,SACE,oCACA,qBAAKwB,UAAU,MACdC,IAAKpB,EACLsB,IAAG,kBAAatB,KAGjB,mCAAMJ,EAAN,OACA,kCAAKC,KACN,kCAAKE,WCOK0C,EAtBF,SAAChB,GACZ,IAAMiB,EAAKjB,EAAMc,WAAW9C,KAAI,SAACkD,GAC/B,OACE,oBAAuBxB,UAAU,GAAjC,SACE,cAAC,EAAD,CAAYoB,WAAYI,KADjBA,EAAUhD,OAgBvB,OAAO,yBAASwB,UAAU,cAAnB,SAAkCuB,KCHxBE,G,MAhBH,WAEZ,OAGI,qBAAKzB,UAAU,qBAAf,SACA,uBAAOU,KAAK,SAASV,UAAU,WAAWJ,MAAM,2BCkFzC8B,EAtEH,WAEV,MAAoCC,mBAASC,EAAGxC,IAAI,KAAM,KAA1D,mBAAOgC,EAAP,KAAmBS,EAAnB,KAGA,EAAgDF,mBAAUC,EAAGxC,IAAK,mBAAoB,KAAtF,mBAAO0C,EAAP,KAAyBC,EAAzB,KASAC,qBAAU,WACNjE,IAAiBE,MAAK,SAACgE,GACrBJ,EAAcI,QAEjB,IAEHD,qBAAU,WACRJ,EAAGjC,IAAI,aAAcyB,KACpB,CAACA,IAGN,IAOOc,EAAqBd,EAAWe,QAAO,SAACX,GAC7C,OAAOA,EAAU/C,KAAK2D,cAAcC,SAASP,EAAiBM,kBAI9D,OAKE,cAHA,CAGA,sBACG,cAAC,EAAD,gBACD,eAAC,IAAD,WACA,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAlB,SACA,iCACE,cAAC,EAAD,CACA3B,WAAYkB,EAAkBf,aAvBjB,SAACK,GACG,SAAnBA,EAAW/B,KACb0C,EAAoBX,EAAWxB,QAoB3B,eAEA,cAAC,EAAD,gBACA,cAAC,EAAD,CAAMwB,WAAYc,SAGpB,cAAC,IAAD,CAAOK,KAAK,sBAIZ,cAAC,IAAD,UACA,8BACA,cAAC,EAAD,oBAGA,wBACAvC,UAAU,SACVwC,QAAM,EAACC,cAAO,EAACC,cAAO,QC1ERC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,IAAMC,WAAP,WACC,cAAC,IAAD,UACC,cAAC,EAAD,MAFF,OAMAC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.d519b1aa.chunk.js","sourcesContent":["const getDataFromApi = () => {\n  const url = \"https://rickandmortyapi.com/api/character\";\n  return fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      const eachPersonData = data.results.map((info) => {\n        return {\n          id: info.id,\n          name: info.name,\n          species: info.species,\n          status: info.status,\n          gender:info.gender,\n          image: info.image,\n          origin: info.origin.name,\n          origin2:info.origin.url,\n          episode: info.episode.length,\n        };\n      });\n     \n      return eachPersonData\n    });\n\n \n};\n\nexport default getDataFromApi;\n","const get = (key, defaultData) => {\n    const data = localStorage.getItem(key);\n    if (data === null) {\n      return defaultData;\n    } else {\n      return JSON.parse(data);\n    }\n  };\n  \n  const set = (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  \n  const ToExportLocalObj = {\n    get: get,\n    set: set\n  };\n  \n  export default ToExportLocalObj;\n  ","export default __webpack_public_path__ + \"static/media/rickandmorty-logo.de13d484.png\";","import React from 'react';\nimport logo from \"../images/rickandmorty-logo.png\";\n\nconst Header = () => {\n\n\nreturn (\n\n<header className=\"\">     \n  <img src={logo} alt=\"Rick and Morty logo\" className=\"logoheader\" />\n</header>\n\n)\n\n};\n\nexport default Header;","import React from 'react';\n\n\n\nconst MoreInfo= () => {\n\n    return(\n    \n        <fieldset className=\"claim\">\n        ¡Aquí encontrarás más info de tus personajes favoritos!\n      </fieldset>\n//Meter web , pag oficial, facebook o algo asi\n\n    )\n    \n    }\n     export default MoreInfo;\n    \n    ","import React from \"react\";\n\nconst FormFilter = (props) => {\n  const handleChange = (event) => {\n    props.handleFilter({\n      value: event.target.value,\n      key: \"name\",\n    });\n\n    console.log(event.target.value);\n  };\n\n  const submitPj = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <>\n      <form className=\"\" onSubmit={submitPj}>\n        <div className=\"\">\n          <div className=\"\">\n            <input\n              name=\"nombre\"\n              id=\"name\"\n              className=\"\"\n              type=\"text\"\n              placeholder=\"Busca a tu personaje\"\n              value={props.filterName}\n              onChange={handleChange}\n            />\n          </div>\n          {/* <div className=\"\">\n            <select className=\"formControl\" name=\"especie\">\n              <option value=\"\"> Selecciona la especie</option>\n            </select>\n          </div> */}\n        </div>\n\n       \n      </form>\n     \n      <div>\n        <h4> Tus resultados</h4>\n      </div>\n    </>\n  );\n};\n\nexport default FormFilter;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst CardPerson = (props) => {\n  const { name, species, gender, status, image , origin, id} = props.personajes;\n\n  <li key = {id} className= ''> </li>\n\n\n  return (\n    <Link className= 'linkclass' to= { `/CardPerson/${id}`}>\n      <article>\n      <img className=\"img\"\n       src={image} \n       alt={`foto de ${image}`}\n        />\n  \n      <h4> {name} </h4>\n      <p> {species}</p>\n     <p> {gender}</p>\n     \n      \n    </article>\n     </Link>\n  );\n};\n\nexport default CardPerson;\n","import React from \"react\";\nimport CardPerson from \"./CardPerson\";\nimport ErrorMsg from \"./ErrorMsg\";\n\nconst List = (props) => {\n  const pj = props.personajes.map((personaje) => {\n    return (\n      <li key={personaje.id} className=\"\">\n        <CardPerson personajes={personaje} />\n      </li>\n    );\n  });\n\n//MIRAR QUE PASA EN LA FUNCION al comprobar\n  const renderPersonaje = () => {\n    console.log(props.personajes.length);\n    if (props.personajes.length === 0) {\n      <ErrorMsg> </ErrorMsg>;\n    } else {\n      <ul className=\"listPersons\"> {pj}</ul>;\n    }\n  };\n\n  return <section className=\"listPersons\">{pj}</section>;\n};\n\nexport default List;\n","\n\nimport React from 'react';\n\nconst ResetBtn= () => {\n\n    return(\n    \n\n        <div className=\"classBtn-Container\">\n        <input type=\"submit\" className=\"classBtn\" value=\"Borrar búsqueda\" />\n      </div>\n\n\n    )\n    \n    }\n    \n    \n    \n    export default ResetBtn;","import React, { useState, useEffect } from \"react\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport getDataFromApi from \"../services/getDataFromApi\";\nimport ls from \"../services/localStorage\";\n\n////Components///\n\nimport Header from './Header';\nimport MoreInfo from './MoreInfo';\n\nimport FormFilter from \"./FormFilter\";\nimport List from \"./List\";\nimport \"../styles/App.scss\";\n\n\n\n\n//prueba mensaje de error aqui\nimport ErrorMsg from './ErrorMsg';\nimport ResetBtn from \"./resetBtn\";\n\nconst App = () => {\n  /////////ESTADO\n  const [personajes, setPersonajes] = useState(ls.get(\"pj\", []));\n\n  //para filtrar dspues crear constant   y guardar en el ls tmb\n  const [filterNamePerson, setFilterNamePerson] = useState (ls.get ('filterNamePerson', ''));\n  //no muy segura de usarlo o no xa filterperson  \n\n\n  //PARA FILTRAR ESPECIES \n  // const [filterSpeciePerson, setFilterSpeciePerson] = useState (ls.get ('filterSpeciePerson', '') )\n\n  \n  //effects\n  useEffect(() => {\n      getDataFromApi().then((personajesData) => {\n        setPersonajes(personajesData);\n      });\n  }, []);\n\n  useEffect(() => {\n    ls.set(\"personajes\", personajes);\n  }, [personajes]);\n\n// filtros de Handle \nconst handleFilter = (personajes) => {\n  if (personajes.key === \"name\") {\n    setFilterNamePerson(personajes.value);\n  }\n};\n\n // render filter\n const filteredPersonajes = personajes.filter((personaje) => {\n  return personaje.name.toLowerCase().includes(filterNamePerson.toLowerCase());\n});\n\n  \n  return (\n\n    //AQUI empezar con switch path y cosas raras\n\n\n    <>\n       <Header> </Header>\n      <Switch> \n      <Route exact path=\"/\">\n      <main>\n        <FormFilter\n        filterName={filterNamePerson} handleFilter={handleFilter}> </FormFilter>\n        <ResetBtn> </ResetBtn>\n        <List personajes={filteredPersonajes} />\n      </main>\n      </Route>\n      <Route path=\"./CDetailBis/ \" />\n      </Switch>\n\n\n      <Switch> \n      <nav>\n      <MoreInfo> </MoreInfo>\n      </nav>\n      </Switch>\n      <footer\n      className=\"footer\"\n      Marina Benítez Sánchez>\n      </footer>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n   <HashRouter>\n    <App />\n  </HashRouter>,\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}