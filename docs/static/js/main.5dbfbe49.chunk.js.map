{"version":3,"sources":["serviceWorker.js","services/getDataFromApi.js","services/localStorage.js","images/rickandmorty-logo.png","components/Header.js","components/MoreInfo.js","components/FormFilter.js","components/CardPerson.js","components/NotFound.js","components/ListPerson.js","components/Footer.js","components/CardDetail.js","components/resetBtn.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","getDataFromApi","fetch","then","response","json","data","eachPersonData","results","map","info","id","name","species","status","gender","image","origin","origin2","url","episode","length","console","table","ToExportLocalObj","get","key","defaultData","localStorage","getItem","JSON","parse","set","value","setItem","stringify","Header","className","src","logo","alt","MoreInfo","href","FormFilter","props","handleChange","event","handleFilter","target","log","onSubmit","e","preventDefault","type","placeholder","filterName","onChange","htmlFor","filterGender","CardPerson","personajes","to","NotFound","filterNamePerson","ListPerson","pj","personaje","Footer","CardDetail","ResetBtn","onClick","resetBtn","App","useState","ls","setPersonajes","setFilterNamePerson","setFilterGender","useEffect","personajesData","filteredPersonajes","filter","toLowerCase","includes","exact","path","render","cards","routeCardId","params","personajeId","foundCardPerson","find","parseInt","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5dbfbe49.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const getDataFromApi = () => {\n  const url = \"https://rickandmortyapi.com/api/character\";\n  return fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      const eachPersonData = data.results.map((info) => {\n        return {\n          id: info.id,\n          name: info.name,\n          species: info.species,\n          status: info.status,\n          gender:info.gender,\n          image: info.image,\n          origin: info.origin.name,\n          origin2:info.origin.url,\n          episode: info.episode.length,\n        };\n      });\n\n      console.table (eachPersonData)\n     \n      return eachPersonData\n    });\n\n \n};\n\nexport default getDataFromApi;\n","const get = (key, defaultData) => {\n    const data = localStorage.getItem(key);\n    if (data === null) {\n      return defaultData;\n    } else {\n      return JSON.parse(data);\n    }\n  };\n  \n  const set = (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  \n  const ToExportLocalObj = {\n    get: get,\n    set: set\n  };\n  \n  export default ToExportLocalObj;\n  ","export default __webpack_public_path__ + \"static/media/rickandmorty-logo.de13d484.png\";","import React from 'react';\nimport logo from \"../images/rickandmorty-logo.png\";\n\nconst Header = () => {\n\n\nreturn (\n\n<header className=\"\">     \n  <img src={logo} alt=\"Rick and Morty logo\" className=\"logoheader\" />\n</header>\n\n)\n\n};\n\nexport default Header;","import React from 'react';\n\n\n\nconst MoreInfo= () => {\n\n    return(\n    \n        <fieldset className=\"claim\">\n        \n        <a href= 'https://www.adultswim.com/videos/rick-and-morty'>\n            Visita la página oficial para más info!</a>\n      </fieldset>\n\n\n    )\n    \n    }\n     export default MoreInfo;\n    \n    ","import React from \"react\";\n\nconst FormFilter = (props) => {\n  const handleChange = (event) => {\n    props.handleFilter({\n      value: event.target.value,\n      key: event.target.id,\n    });\n\n    console.log(event.target.value);\n  };\n\n\n  const submitPj = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <>\n      <form className=\"colorfonts\" onSubmit={submitPj}>\n        <div className=\"\">\n          <div className=\"\">\n            <input\n              name=\"nombre\"\n              id=\"name\"\n              className=\"colorfonts\"\n              type=\"text\"\n              placeholder=\"Busca a tu personaje\"\n              value={props.filterName}\n              onChange={handleChange}\n            />\n\n\n            <div>\n            <label className=\"\" htmlFor=\"gender\">\n        Género:\n      </label>\n\n      <select\n        className=\"classBtn\"\n        name=\"gender\"\n        id=\"gender\"\n        key= 'gender'\n        value={props.filterGender}\n        onChange={handleChange}\n      >\n        <option value=\"\">Todos</option>\n        <option value=\"female\">Mujer</option>\n        <option value=\"male\">Hombre</option>\n        <option value=\"unknow\">Unknow</option>\n      </select>\n                 \n\n            </div>\n          </div>\n          {/* <div className=\"\">\n            <select className=\"formControl\" name=\"especie\" id='especie'>\n              <option value=\"\"> Selecciona la especie</option>\n                <option value=\"\"> Selecciona la especie</option>\n                <option value=\"\"> Selecciona la especie</option>\n            </select>\n          </div> */}\n        </div>\n\n       \n      </form>\n     \n      <div>\n        <h4 className='colorfonts'> Tus resultados</h4>\n      </div>\n    </>\n  );\n};\n\nexport default FormFilter;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\n\nconst CardPerson = (props) => {\n  const { name, species, gender,image , id} = props.personajes;\n\n  <li key = {id} > </li>\n\n\n  return (\n    <Link to={`/CardPerson/${id}`}>\n      <div className= 'cardPerson-container'>   \n      <article>\n      <h4> {name} </h4>\n      <img className=\"img\"\n       src={image} \n       alt={`foto de ${image}`}\n        />\n      <p> {species}</p>\n      <p> {gender}</p>\n    </article>\n    </div>\n\n     </Link> \n  );\n};\n\nexport default CardPerson;\n\n\n//PROBANDO LOS PROTOS \n\nCardPerson.propTypes  = {\nCardPerson: PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  gender: PropTypes.string,\n  species: PropTypes.string,\n  image: PropTypes.string,\n}),\n};\n","\nimport React from 'react';\n\n\nfunction NotFound(props) {\n    return (\n      <>\n        <p>Lo siento!!no hay nada que coincida con  {props.filterNamePerson}</p>\n      </>\n    );\n  }\n  export default NotFound;\n  \n","import React from \"react\";\nimport CardPerson from \"./CardPerson\";\nimport NotFound from './NotFound';\n\nconst ListPerson = (props) => {\nlet pj = '';\nconsole.log(props)\n\n  if (props.personajes.length === 0) {\n    return <NotFound   filterNamePerson= {props.filterNamePerson}/>;\n  }\n  else {\n\n    pj = props.personajes.map((personaje) => {\n      return (\n        <li key={personaje.id} className=\"\">\n          <CardPerson personajes={personaje} />\n  \n        </li>\n      );\n    });\n  } \n \n\n  \n  return <section className=\"listPersons \">{pj}</section>;\n};\n\nexport default ListPerson;\n\n\n  \n","import React from 'react';\n\n\nconst Footer = () => {\n\nreturn (\n \n    <footer className=\"footer\">\n    <p className=\"footer__link\">Marina Benítez Sánchez</p>\n    </footer>\n\n)\n\n\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CardDetail= (props) => {\n    const { name, species, gender, status, image , origin, episode} = props.personaje;\n\n    \nreturn(\n<>\n\n     <div className= 'cardPerson-container2'>\n     <article>\n     <h2> {name} </h2>\n      <img className=\"img\"\n       src={image} \n       alt={`foto de ${image}`}\n        />\n      <p> {species}</p>\n      <p> {gender}</p>\n      <p>{origin}</p>\n      <p>{status}</p>\n      <p>{episode}</p>\n\n</article>\n</div>\n\n<Link to= \"/\" className= 'classBtn'>\n     Volver\n</Link>\n</> \n\n)\n}\n\nexport default CardDetail;","\n\nimport React from 'react';\n\nconst ResetBtn= (props) => {\n\n    return(\n    \n        <button className=\"classBtn-Container classBtn\" \n        onClick={props.resetBtn}>\n          <i className=\"fas fa-trash\"></i> Borrar Búsqueda\n        </button>\n    )\n   \n    \n    }\n    \n    \n    export default ResetBtn;","import React, { useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n//services\nimport getDataFromApi from \"../services/getDataFromApi\";\nimport ls from \"../services/localStorage\";\n////Components///\nimport Header from \"./Header\";\nimport MoreInfo from \"./MoreInfo\";\nimport FormFilter from \"./FormFilter\";\nimport ListPerson from \"./ListPerson\";\nimport Footer from \"./Footer\";\nimport CardDetail from \"./CardDetail\";\nimport \"../styles/App.scss\";\nimport ResetBtn from \"./resetBtn\";\n\nconst App = () => {\n  //estado inicial del array, OR se llena con lo guardado  OR comienza vacío\n  const [personajes, setPersonajes] = useState(ls.get(\"personajes\") || []);\n\n  //para filtrar dspues crear constant   y guardar en el ls tmb\n  const [filterNamePerson, setFilterNamePerson] = useState(\n    ls.get(\"filterNamePerson\", \"\")\n  );\n\n  const [filterGender, setFilterGender] = useState(ls.get(\"filterGender\", \"\"));\n  //FILTRAR ESPECIES\n  // const [filterSpeciePerson, setFilterSpeciePerson] = useState (ls.get ('filterSpeciePerson', '') )\n\n  //effects\n  useEffect(() => {\n    getDataFromApi().then((personajesData) => {\n      setPersonajes(personajesData);\n    });\n  }, []);\n\n  useEffect(() => {\n    ls.set(\"personajes\", personajes);\n  }, [personajes]);\n\n  useEffect(() => {\n    ls.set(\"filterNamePerson\", filterNamePerson);\n  }, [filterNamePerson]);\n\n  useEffect(() => {\n    ls.set(\"filterGender\", setFilterGender);\n  }, [filterGender]);\n\n  // filtros de Handle  name, gender\n  const handleFilter = (personajes) => {\n    if (personajes.key === \"name\") {\n      setFilterNamePerson(personajes.value);\n      //generos\n    } else if (personajes.key === \"gender\") setFilterGender(personajes.value);\n  };\n\n\n\n  // render filter\n  const filteredPersonajes = personajes.filter((pj) => {\n    return pj.name.toLowerCase().includes(filterNamePerson.toLowerCase());\n  });\n\n  //Nueva funcion para usar ruta para  ver tarjetita por tarjetita\n   const renderCardDetail = (cards) => {\n    const routeCardId = cards.match.params.personajeId;\n    const foundCardPerson = personajes.find(\n      (personaje) => personaje.id === parseInt(routeCardId)\n    );\n\n    if (foundCardPerson) {\n      return <CardDetail personaje={foundCardPerson} />;\n    } else {\n      return <p> Prueba otra vez</p>;\n    }\n  };\n\n  // Reset btn\n  const handleReset = () => {\n    //Vuelve al estado filternamePerson Vacío\n    setFilterNamePerson(\"\");\n  };\n\n  return (\n\n    <>\n      <Header> </Header>\n      <Switch>\n        <Route exact path=\"/\">\n          <main>\n            <FormFilter\n              filterName={filterNamePerson}\n              handleFilter={handleFilter}\n              //meter más filtros\n            ></FormFilter>\n\n            <ResetBtn resetBtn={handleReset}></ResetBtn>\n\n            <ListPerson personajes={filteredPersonajes}\n            filterNamePerson= {filterNamePerson} />\n          </main>\n        </Route>\n\n        <Route path=\"/cardPerson/:personajeId\" render={renderCardDetail} />\n      </Switch>\n\n      <nav>\n        <MoreInfo> </MoreInfo>\n      </nav>\n\n      <Footer> </Footer>\n    </>\n  );\n};\n\nexport default App;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from './components/App';\nimport './styles/index.scss';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n   <HashRouter>\n    <App />\n  </HashRouter>,\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}